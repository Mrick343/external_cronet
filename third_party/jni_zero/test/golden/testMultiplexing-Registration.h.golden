// This file was generated by
//     //third_party/jni_zero/jni_zero.py
// For
//     J.N

#ifndef TEMP_DIR_HEADER_
#define TEMP_DIR_HEADER_

#include <iterator>

#include "third_party/jni_zero/jni_zero_internal.h"



// Forward declarations (methods).

JNI_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1bar(
    JNIEnv* env,
    jclass jcaller,
    jobject sample);
JNI_BOUNDARY_EXPORT void Java_org_1jni_11zero_1SampleForAnnotationProcessor_1foo(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jboolean Java_org_1jni_11zero_1SampleForAnnotationProcessor_1hasPhalange(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnClass(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnClasses(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jobject
    Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnConvertedAppObjects(
    JNIEnv* env,
    jclass jcaller,
    jclass __arrayClazz);
JNI_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnConvertedInts(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jobject
    Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnConvertedString(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jobject
    Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnConvertedStrings(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnObject(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnObjects(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnString(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnStrings(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnStruct(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnStructs(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnThrowable(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnThrowables(
    JNIEnv* env,
    jclass jcaller);
JNI_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1revString(
    JNIEnv* env,
    jclass jcaller,
    jobject stringToReverse);
JNI_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1sendSamplesToNative(
    JNIEnv* env,
    jclass jcaller,
    jobject strs);
JNI_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1sendToNative(
    JNIEnv* env,
    jclass jcaller,
    jobject strs);
JNI_BOUNDARY_EXPORT jobject Java_org_1jni_11zero_1SampleForAnnotationProcessor_1testAllPrimitives(
    JNIEnv* env,
    jclass jcaller,
    jint zint,
    jobject ints,
    jlong zlong,
    jobject longs,
    jshort zshort,
    jobject shorts,
    jchar zchar,
    jobject chars,
    jbyte zbyte,
    jobject bytes,
    jdouble zdouble,
    jobject doubles,
    jfloat zfloat,
    jobject floats,
    jboolean zbool,
    jobject bools);
JNI_BOUNDARY_EXPORT void Java_org_1jni_11zero_1SampleForAnnotationProcessor_1testSpecialTypes(
    JNIEnv* env,
    jclass jcaller,
    jobject clazz,
    jobject classes,
    jobject throwable,
    jobject throwables,
    jobject string,
    jobject strings,
    jobject convertedString,
    jobject convertedStrings,
    jobject optionalString,
    jobject tStruct,
    jobject structs,
    jobject obj,
    jobject convertedObj,
    jobject objects,
    jobject nestedInterface,
    jobject view,
    jobject context,
    jobject convertedObjects);


JNI_BOUNDARY_EXPORT jobject Java_J_N__1O(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num) {

        switch (switch_num) {
          
          case 0:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnClass(env, jcaller);

          case 1:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnClasses(env, jcaller);

          case 2:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnConvertedInts(env, jcaller);

          case 3:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnConvertedString(env, jcaller);

          case 4:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnConvertedStrings(env, jcaller);

          case 5:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnObject(env, jcaller);

          case 6:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnObjects(env, jcaller);

          case 7:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnString(env, jcaller);

          case 8:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnStrings(env, jcaller);

          case 9:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnStruct(env, jcaller);

          case 10:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnStructs(env, jcaller);

          case 11:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnThrowable(env, jcaller);

          case 12:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnThrowables(env, jcaller);
          default:
            JNI_ZERO_ILOG("J_N__1O was called with an invalid switch number: %d", switch_num);
            JNI_ZERO_DCHECK(false);
            return {};
        }
}
JNI_BOUNDARY_EXPORT jobject Java_J_N__1O_1IOJOSOCOBODOFOZO(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num, jint int_param1, jobject object_param1, jlong long_param1, jobject object_param2, jshort short_param1, jobject object_param3, jchar char_param1, jobject object_param4, jbyte byte_param1, jobject object_param5, jdouble double_param1, jobject object_param6, jfloat float_param1, jobject object_param7, jboolean boolean_param1, jobject object_param8) {
        return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1testAllPrimitives(env, jcaller, int_param1, object_param1, long_param1, object_param2, short_param1, object_param3, char_param1, object_param4, byte_param1, object_param5, double_param1, object_param6, float_param1, object_param7, boolean_param1, object_param8);
}
JNI_BOUNDARY_EXPORT jobject Java_J_N__1O_1L(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num, jclass class_param1) {
        return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1returnConvertedAppObjects(env, jcaller, class_param1);
}
JNI_BOUNDARY_EXPORT jboolean Java_J_N__1Z(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num) {
        return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1hasPhalange(env, jcaller);
}
JNI_BOUNDARY_EXPORT void Java_J_N__1V(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num) {
        return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1foo(env, jcaller);
}
JNI_BOUNDARY_EXPORT void Java_J_N__1V_1OOOOOOOOOOOOOOOOOO(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num, jobject object_param1, jobject object_param2, jobject object_param3, jobject object_param4, jobject object_param5, jobject object_param6, jobject object_param7, jobject object_param8, jobject object_param9, jobject object_param10, jobject object_param11, jobject object_param12, jobject object_param13, jobject object_param14, jobject object_param15, jobject object_param16, jobject object_param17, jobject object_param18) {
        return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1testSpecialTypes(env, jcaller, object_param1, object_param2, object_param3, object_param4, object_param5, object_param6, object_param7, object_param8, object_param9, object_param10, object_param11, object_param12, object_param13, object_param14, object_param15, object_param16, object_param17, object_param18);
}
JNI_BOUNDARY_EXPORT jobject Java_J_N__1O_1O(
    JNIEnv* env,
    jclass jcaller,
    jint switch_num, jobject object_param1) {

        switch (switch_num) {
          
          case 0:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1bar(env, jcaller, object_param1);

          case 1:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1revString(env, jcaller, object_param1);

          case 2:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1sendSamplesToNative(env, jcaller, object_param1);

          case 3:
             return Java_org_1jni_11zero_1SampleForAnnotationProcessor_1sendToNative(env, jcaller, object_param1);
          default:
            JNI_ZERO_ILOG("J_N__1O_1O was called with an invalid switch number: %d", switch_num);
            JNI_ZERO_DCHECK(false);
            return {};
        }
}
// Method declarations.


static const JNINativeMethod kMethods_J_N[] = {
    { "_O", "(I)Ljava/lang/Object;", reinterpret_cast<void*>(Java_J_N__1O) },
    { "_O_IOJOSOCOBODOFOZO",
        "(IILjava/lang/Object;JLjava/lang/Object;SLjava/lang/Object;CLjava/lang/Object;BLjava/lang/Object;DLjava/lang/Object;FLjava/lang/Object;ZLjava/lang/Object;)Ljava/lang/Object;",
        reinterpret_cast<void*>(Java_J_N__1O_1IOJOSOCOBODOFOZO) },
    { "_O_L", "(ILjava/lang/Class;)Ljava/lang/Object;", reinterpret_cast<void*>(Java_J_N__1O_1L) },
    { "_O_O", "(ILjava/lang/Object;)Ljava/lang/Object;", reinterpret_cast<void*>(Java_J_N__1O_1O) },
    { "_V", "(I)V", reinterpret_cast<void*>(Java_J_N__1V) },
    { "_V_OOOOOOOOOOOOOOOOOO",
        "(ILjava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V",
        reinterpret_cast<void*>(Java_J_N__1V_1OOOOOOOOOOOOOOOOOO) },
    { "_Z", "(I)Z", reinterpret_cast<void*>(Java_J_N__1Z) }
};

namespace {

JNI_ZERO_COMPONENT_BUILD_EXPORT bool RegisterNative_J_N(JNIEnv* env) {
  const int number_of_methods = std::size(kMethods_J_N);

  jni_zero::ScopedJavaLocalRef<jclass> native_clazz =
      jni_zero::GetClass(env, "J/N");
  if (env->RegisterNatives(
      native_clazz.obj(),
      kMethods_J_N,
      number_of_methods) < 0) {

    jni_zero::internal::HandleRegistrationError(env, native_clazz.obj(), __FILE__);
    return false;
  }

  return true;
}

}  // namespace


// Registration function.

namespace  {

bool RegisterNatives(JNIEnv* env) {
  // Register natives in a proxy.
  if (!RegisterNative_J_N(env)) {
    return false;
  }


  return true;
}

}  // namespace 


#endif  // TEMP_DIR_HEADER_

