// Copyright (C) 2022 The Android Open Source Project
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// This file is automatically generated by gen_android_bp. Do not edit.

build = ["sources.bp"]

cc_defaults {
    name: "cronet_defaults",
    cflags: [
        "-DGOOGLE_PROTOBUF_NO_RTTI",
        "-DBORINGSSL_SHARED_LIBRARY",
        "-O2",
        "-Wno-ambiguous-reversed-operator",
        "-Wno-error=return-type",
        "-Wno-macro-redefined",
        "-Wno-missing-field-initializers",
        "-Wno-non-virtual-dtor",
        "-Wno-null-pointer-subtraction",
        "-Wno-sign-compare",
        "-Wno-sign-promo",
        "-Wno-unreachable-code-loop-increment",
        "-Wno-unused-parameter",
        "-fPIC",
        "-fvisibility=hidden",
    ],
    stl: "none",
    apex_available: [
        "com.android.tethering",
    ],
    min_sdk_version: "29",
    local_include_dirs: [
        "buildtools/third_party/libc++/",
        "buildtools/third_party/libc++/trunk/include",
        "buildtools/third_party/libc++abi/trunk/include",
    ],
}

cc_defaults {
    name: "cronet_boringssl_flags",

    cflags: [
        "-fvisibility=hidden",
        "-DBORINGSSL_SHARED_LIBRARY",
        "-DBORINGSSL_ANDROID_SYSTEM",
        "-DOPENSSL_SMALL",
        "-Werror",
        "-Wno-unused-parameter",
    ],

    cppflags: [
        "-Wall",
        "-Werror",
    ],

    stl: "none",
}

cc_defaults {
    name: "cronet_boringssl_defaults",

    local_include_dirs: ["third_party/boringssl/src/include"],
    export_include_dirs: ["third_party/boringssl/src/include"],
    cflags: [
        "-DBORINGSSL_IMPLEMENTATION",
        "-DBORINGSSL_SHARED_LIBRARY",
    ],
}

cc_defaults {
    name: "cronet_libcrypto_defaults",

    // Windows and Macs both have problems with assembly files
    target: {
        windows: {
            enabled: true,
            cflags: ["-DOPENSSL_NO_ASM"],
            host_ldlibs: ["-lws2_32"],
        },
        darwin: {
            cflags: ["-DOPENSSL_NO_ASM"],
        },
        host: {
            host_ldlibs: ["-lpthread"],
        },
        android: {
            // On FIPS builds (i.e. Android only) prevent other libraries
            // from pre-empting symbols in libcrypto which could affect FIPS
            // compliance and cause integrity checks to fail. See b/160231064.
            ldflags: ["-Wl,-Bsymbolic"],
        },
    },

    cflags: [
        "-DBORINGSSL_SHARED_LIBRARY",
    ],

    local_include_dirs: ["third_party/boringssl/src/crypto"],
    stl: "none",
}

cc_object {
    name: "cronet_bcm_object",
    defaults: [
        "cronet_libcrypto_bcm_sources",
        "cronet_libcrypto_defaults",
        "cronet_boringssl_defaults",
        "cronet_boringssl_flags",
        "cronet_defaults",
    ],
    sanitize: {
        address: false,
        hwaddress: false,
//        memtag_stack: false,
        fuzzer: false,
    },
    target: {
        android: {
            cflags: [
                "-DBORINGSSL_FIPS",
                "-fPIC",
                // -fno[data|text]-sections required to ensure a
                // single text and data section for FIPS integrity check
                "-fno-data-sections",
                "-fno-function-sections",
            ],
            linker_script: "third_party/boringssl/src/crypto/fipsmodule/fips_shared.lds",
        },
        // Temporary hack to let BoringSSL build with a new compiler.
        // This doesn't enable HWASAN unconditionally, it just causes
        // BoringSSL's asm code to unconditionally use a HWASAN-compatible
        // global variable reference so that the non-HWASANified (because of
        // sanitize: { hwaddress: false } above) code in the BCM can
        // successfully link against the HWASANified code in the rest of
        // BoringSSL in HWASAN builds.
        android_arm64: {
            asflags: [
                "-fsanitize=hwaddress",
            ],
        },
    },
    apex_available: [
        "com.android.tethering",
    ],
    min_sdk_version: "29",
}

// Version of bcm_object built with BORINGSSL_FIPS_BREAK_TESTS defined.
// Only for use with the FIPS break-tests.sh script.
// Must be kept in sync with bcm_object.
cc_object {
    name: "cronet_bcm_object_for_testing",
    visibility: [
        "//external/cronet",
    ],
    device_supported: true,
    defaults: [
        "cronet_libcrypto_bcm_sources",
        "cronet_libcrypto_defaults",
        "cronet_boringssl_defaults",
        "cronet_boringssl_flags",
    ],
    sanitize: {
        address: false,
        hwaddress: false,
        fuzzer: false,
    },
    target: {
        android: {
            cflags: [
                "-DBORINGSSL_FIPS",
                "-DBORINGSSL_FIPS_BREAK_TESTS",
                "-fPIC",
                // -fno[data|text]-sections required to ensure a
                // single text and data section for FIPS integrity check
                "-fno-data-sections",
                "-fno-function-sections",
            ],
            linker_script: "third_party/boringssl/src/crypto/fipsmodule/fips_shared.lds",
        },
        // Temporary hack to let BoringSSL build with a new compiler.
        // This doesn't enable HWASAN unconditionally, it just causes
        // BoringSSL's asm code to unconditionally use a HWASAN-compatible
        // global variable reference so that the non-HWASANified (because of
        // sanitize: { hwaddress: false } above) code in the BCM can
        // successfully link against the HWASANified code in the rest of
        // BoringSSL in HWASAN builds.
        android_arm64: {
            asflags: [
                "-fsanitize=hwaddress",
            ],
        },
    },
    min_sdk_version: "29",
}

cc_library_shared {
    name: "cronet_libcrypto",
    visibility: ["//visibility:public"],
    defaults: [
        "cronet_libcrypto_sources",
        "cronet_libcrypto_defaults",
        "cronet_boringssl_defaults",
        "cronet_boringssl_flags",
        "cronet_defaults",
    ],
    unique_host_soname: true,
    srcs: [
        ":cronet_bcm_object",
    ],
    target: {
        android: {
            cflags: [
                "-DBORINGSSL_FIPS",
            ],
            sanitize: {
                // Disable address sanitizing otherwise libcrypto will not report
                // itself as being in FIPS mode, which causes boringssl_self_test
                // to fail.
                address: false,
            },
            inject_bssl_hash: true,
        },
    },
    apex_available: [
        "com.android.tethering",
    ],
    min_sdk_version: "29",
}

cc_library {
    name: "cronet_libcrypto_for_testing",
    visibility: [
        "//external/cronet",
    ],
    defaults: [
        "cronet_libcrypto_sources",
        "cronet_libcrypto_defaults",
        "cronet_boringssl_defaults",
        "cronet_boringssl_flags",
    ],
    unique_host_soname: true,
    srcs: [
        ":cronet_bcm_object_for_testing",
    ],
    target: {
        android: {
            cflags: [
                "-DBORINGSSL_FIPS",
                "-DBORINGSSL_FIPS_BREAK_TESTS",
            ],
            sanitize: {
                // Disable address sanitizing otherwise libcrypto will not report
                // itself as being in FIPS mode, which causes boringssl_self_test
                // to fail.
                address: false,
            },
            inject_bssl_hash: true,
            static: {
                // Disable the static version of libcrypto, as it causes
                // problems for FIPS certification.  Use libcrypto_static for
                // modules that need static libcrypto but do not need FIPS self
                // testing, or use dynamic libcrypto.
                enabled: false,
            },
        },
    },
    min_sdk_version: "29",
}

cc_library_shared {
    name: "cronet_libssl",
    visibility: ["//visibility:public"],
    defaults: [
        "cronet_libssl_sources",
        "cronet_boringssl_defaults",
        "cronet_boringssl_flags",
        "cronet_defaults",
    ],
    target: {
        windows: {
            enabled: true,
        },
    },
    unique_host_soname: true,

    shared_libs: ["cronet_libcrypto"],

    apex_available: [
        "com.android.tethering",
    ],
    min_sdk_version: "29",
}

cc_library_shared {
    name: "cronet_bssl",
    defaults: [
        "cronet_bssl_sources",
        "cronet_boringssl_flags",
        "cronet_defaults",
    ],

    srcs: [
        ":cronet_aml_buildtools_third_party_libc___libc__",
        ":cronet_aml_buildtools_third_party_libc__abi_libc__abi",
    ],

    shared_libs: [
        "cronet_libcrypto",
        "cronet_libssl",
    ],
    min_sdk_version: "29",
    cflags: [
        "-DBORINGSSL_SHARED_LIBRARY",
    ],
}


// Utility binary for CMVP on-site testing.
cc_binary {
    name: "cronet_test_fips",
    host_supported: false,
    defaults: [
        "cronet_boringssl_flags",
    ],
    shared_libs: [
        "cronet_libcrypto",
    ],
    srcs: [
        "third_party/boringssl/src/util/fipstools/test_fips.c",
    ],
    required: [
        "adb",
        "cronet_libcrypto_for_testing",
    ],
}

