#!/bin/bash

# Copyright 2023 Google Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -eu

# Check if the last commit included changes to a .gn or .gni file, which need
# to be reflected in a .patch
result=$(git --no-pager diff --name-only HEAD..HEAD~1 | egrep "(\.gn$|\.gni$)")

if [ -z "${result}" ]; then
    # no patch is needed.
    exit 0
fi

if [ -d "$(git rev-parse --git-dir)/rebase-merge" ]; then
    # interactive rebase in progress.
    echo "WARNING! .patch files are not updated during interactive rebase"
    exit 0
fi

# create patch (which only reflects changes to .gn and .gni files).
patches_dir="${ANDROID_BUILD_TOP}/external/cronet/patches" 
number_of_patches=$(git ls-tree -r HEAD~1 -- "${patches_dir}" | wc -l)
patch_name=$(git format-patch -1 -N --start-number "${number_of_patches}" -o "${patches_dir}" HEAD -- *.gn *.gni)
git add "${patch_name}"

# There is no flag to skip the post-commit hook (--no-verify only works for
# pre-commit and commit-msg hooks). Briefly remove the executable
# permission to prevent recursion.
chmod -x .git/hooks/post-commit
# Ignore errors as otherwise the post-commit hook is left without the
# executable permission.
git -c "advice.ignoredHook=false" commit --amend --no-edit || true
chmod +x .git/hooks/post-commit

echo "INFO: a .patch file was added to your CL"

