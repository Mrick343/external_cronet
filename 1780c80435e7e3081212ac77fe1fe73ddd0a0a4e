{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c844dc06_d447a2b7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1750078
      },
      "writtenOn": "2024-06-14T16:23:27Z",
      "side": 1,
      "message": "Can we please fix this downstream in Chromium? The fix should hopefully be straightforward where prefix is only added to generated files and not existing files or am I misunderstanding this?",
      "revId": "1780c80435e7e3081212ac77fe1fe73ddd0a0a4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59ee1db7_e9f23551",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1947461
      },
      "writtenOn": "2024-06-14T16:34:28Z",
      "side": 1,
      "message": "You mean fix the issue by modifying jni_zero.py?\n\njni_zero.py generate Jni.java.\nFor example, From Token.java, TokenJni.java is generated.\nAnd `import android.net.connectivity.org.chromium.base.Token;` breaks build.\nCurrently, jni_zero takes `--package-prefix` and use this prefix.  \nBut in our case, we want to add prefix for generated code but we don\u0027t want to add for original java code.  \njni_zero.py use package_prefix in many places so not sure how much code change is required, but I can try if you think it\u0027s better.\n```\n//\n// This file was generated by //third_party/jni_zero/jni_zero.py\n//\npackage org.chromium.base;\n\nimport android.net.connectivity.org.chromium.base.Token;\nimport android.net.connectivity.org.jni_zero.GEN_JNI;\nimport org.jni_zero.CheckDiscard;\nimport org.jni_zero.JniStaticTestMocker;\nimport org.jni_zero.NativeLibraryLoadedStatus;\n\n@CheckDiscard(\"crbug.com/993421\")\npublic class TokenJni implements Token.Natives {\n  private static Token.Natives testInstance;\n\n  public static final JniStaticTestMocker\u003cToken.Natives\u003e TEST_HOOKS \u003d\n      new JniStaticTestMocker\u003cToken.Natives\u003e() {\n    @Override\n    public void setInstanceForTesting(Token.Natives instance) {\n      if (!GEN_JNI.TESTING_ENABLED) {\n        throw new RuntimeException(\n            \"Tried to set a JNI mock when mocks aren\u0027t enabled!\");\n      }\n      testInstance \u003d instance;\n    }\n  };\n\n  @Override\n  public Token createRandom() {\n    return (Token) GEN_JNI.android_net_connectivity_org_chromium_base_Token_createRandom();\n  }\n\n  public static Token.Natives get() {\n    if (GEN_JNI.TESTING_ENABLED) {\n      if (testInstance !\u003d null) {\n        return testInstance;\n      }\n      if (GEN_JNI.REQUIRE_MOCK) {\n        throw new UnsupportedOperationException(\n            \"No mock found for the native implementation of Token.Natives. \"\n            + \"The current configuration requires implementations be mocked.\");\n      }\n    }\n    NativeLibraryLoadedStatus.checkLoaded();\n    return new TokenJni();\n  }\n```",
      "parentUuid": "c844dc06_d447a2b7",
      "revId": "1780c80435e7e3081212ac77fe1fe73ddd0a0a4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7353958a_a837905d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1750078
      },
      "writtenOn": "2024-06-14T16:51:24Z",
      "side": 1,
      "message": "Yep. I think this is a bug within the package_prefix code that we can fix inside jni_zero.py",
      "parentUuid": "59ee1db7_e9f23551",
      "revId": "1780c80435e7e3081212ac77fe1fe73ddd0a0a4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b45d8c20_baa1c6c3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1947461
      },
      "writtenOn": "2024-06-14T16:55:36Z",
      "side": 1,
      "message": "I think it\u0027s just because our usecase is hacky.\nWe are trying to make jni code to call java code with prefix but we also want generated code to use java code without prefix for some situation.",
      "parentUuid": "7353958a_a837905d",
      "revId": "1780c80435e7e3081212ac77fe1fe73ddd0a0a4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}