{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "c844dc06_d447a2b7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1750078
      },
      "writtenOn": "2024-06-14T16:23:27Z",
      "side": 1,
      "message": "Can we please fix this downstream in Chromium? The fix should hopefully be straightforward where prefix is only added to generated files and not existing files or am I misunderstanding this?",
      "revId": "1780c80435e7e3081212ac77fe1fe73ddd0a0a4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "59ee1db7_e9f23551",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1947461
      },
      "writtenOn": "2024-06-14T16:34:28Z",
      "side": 1,
      "message": "You mean fix the issue by modifying jni_zero.py?\n\njni_zero.py generate Jni.java.\nFor example, From Token.java, TokenJni.java is generated.\nAnd `import android.net.connectivity.org.chromium.base.Token;` breaks build.\nCurrently, jni_zero takes `--package-prefix` and use this prefix.  \nBut in our case, we want to add prefix for generated code but we don\u0027t want to add for original java code.  \njni_zero.py use package_prefix in many places so not sure how much code change is required, but I can try if you think it\u0027s better.\n```\n//\n// This file was generated by //third_party/jni_zero/jni_zero.py\n//\npackage org.chromium.base;\n\nimport android.net.connectivity.org.chromium.base.Token;\nimport android.net.connectivity.org.jni_zero.GEN_JNI;\nimport org.jni_zero.CheckDiscard;\nimport org.jni_zero.JniStaticTestMocker;\nimport org.jni_zero.NativeLibraryLoadedStatus;\n\n@CheckDiscard(\"crbug.com/993421\")\npublic class TokenJni implements Token.Natives {\n  private static Token.Natives testInstance;\n\n  public static final JniStaticTestMocker\u003cToken.Natives\u003e TEST_HOOKS \u003d\n      new JniStaticTestMocker\u003cToken.Natives\u003e() {\n    @Override\n    public void setInstanceForTesting(Token.Natives instance) {\n      if (!GEN_JNI.TESTING_ENABLED) {\n        throw new RuntimeException(\n            \"Tried to set a JNI mock when mocks aren\u0027t enabled!\");\n      }\n      testInstance \u003d instance;\n    }\n  };\n\n  @Override\n  public Token createRandom() {\n    return (Token) GEN_JNI.android_net_connectivity_org_chromium_base_Token_createRandom();\n  }\n\n  public static Token.Natives get() {\n    if (GEN_JNI.TESTING_ENABLED) {\n      if (testInstance !\u003d null) {\n        return testInstance;\n      }\n      if (GEN_JNI.REQUIRE_MOCK) {\n        throw new UnsupportedOperationException(\n            \"No mock found for the native implementation of Token.Natives. \"\n            + \"The current configuration requires implementations be mocked.\");\n      }\n    }\n    NativeLibraryLoadedStatus.checkLoaded();\n    return new TokenJni();\n  }\n```",
      "parentUuid": "c844dc06_d447a2b7",
      "revId": "1780c80435e7e3081212ac77fe1fe73ddd0a0a4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7353958a_a837905d",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1750078
      },
      "writtenOn": "2024-06-14T16:51:24Z",
      "side": 1,
      "message": "Yep. I think this is a bug within the package_prefix code that we can fix inside jni_zero.py",
      "parentUuid": "59ee1db7_e9f23551",
      "revId": "1780c80435e7e3081212ac77fe1fe73ddd0a0a4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b45d8c20_baa1c6c3",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1947461
      },
      "writtenOn": "2024-06-14T16:55:36Z",
      "side": 1,
      "message": "I think it\u0027s just because our usecase is hacky.\nWe are trying to make jni code to call java code with prefix but we also want generated code to use java code without prefix for some situation.",
      "parentUuid": "7353958a_a837905d",
      "revId": "1780c80435e7e3081212ac77fe1fe73ddd0a0a4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0edf6aa1_c3b703a7",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1750078
      },
      "writtenOn": "2024-06-14T16:57:23Z",
      "side": 1,
      "message": "It\u0027s not that hacky, all we are doing is just prefixing generated files, and it somehow happened that a non-generated file got prefixed. I\u0027d still recommend fixing it downstream otherwise it might complicate stuff later.",
      "parentUuid": "b45d8c20_baa1c6c3",
      "revId": "1780c80435e7e3081212ac77fe1fe73ddd0a0a4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "381c7f86_993f0919",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1947461
      },
      "writtenOn": "2024-06-14T17:07:17Z",
      "side": 1,
      "message": "\u003e it somehow happened that a non-generated file got prefixed.\n\nThis is not true.\nWe are adding `--package-prefix` to tell generated code to call java class with prefix.\nFor example, when we call jni_zero.py agains Token.java with --package-prefix \"android.net.connectivity.org\",\nGenerated Token_jni.h calls Token.java as `android.net.connectivity.org.chromium.base.Token`.\nGenerated TokenJni.java imports Token as `import android.net.connectivity.org.chromium.base.Token;`.\n\nSo I think generated code is consistent.",
      "parentUuid": "0edf6aa1_c3b703a7",
      "revId": "1780c80435e7e3081212ac77fe1fe73ddd0a0a4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a6408593_f7c950f5",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1750078
      },
      "writtenOn": "2024-06-14T17:09:14Z",
      "side": 1,
      "message": "\u003e Generated Token_jni.h calls Token.java as android.net.connectivity.org.chromium.base.Token.\n\nBut it shouldn\u0027t right? `org.chromium.base.Token` is not a generated class so why does it append `android.net.connectivity` prefix, isn\u0027t that a bug?",
      "parentUuid": "381c7f86_993f0919",
      "revId": "1780c80435e7e3081212ac77fe1fe73ddd0a0a4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f3f210ad_3b43f756",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1947461
      },
      "writtenOn": "2024-06-14T17:14:00Z",
      "side": 1,
      "message": "I thought we are adding --package-prefix since JNI needs to call java class by package path that match with the package path after jarjared.\n\nIn my understanding, at the end, org.chromium.base.Token will be jarjared to android.net.connectivity.org.chromium.base.Token.\n\nSo Token_jni.h nees to call android.net.connectivity.org.chromium.base.Token.",
      "parentUuid": "a6408593_f7c950f5",
      "revId": "1780c80435e7e3081212ac77fe1fe73ddd0a0a4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "000aa191_150a9f20",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1750078
      },
      "writtenOn": "2024-06-14T17:23:08Z",
      "side": 1,
      "message": "Yeah, the problem here is that the java import should not be package-prefixed, only the C++ JNI calls.\n\nYour understanding is correct, the bug that happened is that Java imports are being packaged-prefixed. So we should change that from jni_zero.py",
      "parentUuid": "f3f210ad_3b43f756",
      "revId": "1780c80435e7e3081212ac77fe1fe73ddd0a0a4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "77244790_23f1f749",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1947461
      },
      "writtenOn": "2024-06-14T17:36:31Z",
      "side": 1,
      "message": "Yes, we need generated C++ JNI to call android.net.connectivity.org.chromium.base.Token but generated Java code to call chromium.base.Token.\nGenerated Java code will be built with chromium.base.Token and jarjared later.\n\nI will see what change is required in jni_zero and also consider if there is a better solution next week.",
      "parentUuid": "000aa191_150a9f20",
      "revId": "1780c80435e7e3081212ac77fe1fe73ddd0a0a4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "92e60d13_aeea5eec",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1947461
      },
      "writtenOn": "2024-06-18T06:33:04Z",
      "side": 1,
      "message": "I have added \"--skip-prefix-java\" option to jni_zero.py",
      "parentUuid": "77244790_23f1f749",
      "revId": "1780c80435e7e3081212ac77fe1fe73ddd0a0a4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "00ee667e_2ccec1f2",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1750078
      },
      "writtenOn": "2024-06-18T09:58:28Z",
      "side": 1,
      "message": "Alright, I am sure that editing jni_zero should be easier to achieve what you want here, if you think that it is more difficult then we can just",
      "parentUuid": "77244790_23f1f749",
      "revId": "1780c80435e7e3081212ac77fe1fe73ddd0a0a4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8d42198a_b1eae6f9",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1947461
      },
      "writtenOn": "2024-06-18T10:24:09Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "00ee667e_2ccec1f2",
      "revId": "1780c80435e7e3081212ac77fe1fe73ddd0a0a4e",
      "serverId": "85c56323-6fa9-3386-8a01-6480fb634889"
    }
  ]
}