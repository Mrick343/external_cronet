From 4634ef7d3709167647017618c773afe881b51cfd Mon Sep 17 00:00:00 2001
From: Motomu Utsumi <motomuman@google.com>
Date: Wed, 15 Feb 2023 13:16:52 +0900
Subject: [PATCH] cronet: Fix MissingNullability API linter errors

Most fix are from aosp/2427180 and removed dupped fix with aosp/2402861

Test: TH
Change-Id: I76eafad4e6f0c86ab054188f76a77bafde616573
---
 .../src/android/net/http/HttpException.java   |  4 +-
 .../android/net/http/NetworkException.java    |  4 +-
 .../src/android/net/http/QuicException.java   |  4 +-
 .../api/src/android/net/http/QuicOptions.java | 10 ++++-
 .../android/net/http/UploadDataProvider.java  |  8 ++--
 .../src/android/net/http/UploadDataSink.java  |  6 ++-
 .../api/src/android/net/http/UrlRequest.java  | 40 ++++++++++++-------
 .../src/android/net/http/UrlResponseInfo.java | 10 +++++
 8 files changed, 61 insertions(+), 25 deletions(-)

diff --git a/components/cronet/android/api/src/android/net/http/HttpException.java b/components/cronet/android/api/src/android/net/http/HttpException.java
index 4f3d4497..628a1673 100644
--- a/components/cronet/android/api/src/android/net/http/HttpException.java
+++ b/components/cronet/android/api/src/android/net/http/HttpException.java
@@ -4,6 +4,8 @@
 
 package android.net.http;
 
+import androidx.annotation.Nullable;
+
 import java.io.IOException;
 
 /**
@@ -18,7 +20,7 @@ public class HttpException extends IOException {
      *         java.io.IOException#getCause getCause()} method). A null value is permitted, and
      *         indicates that the cause is nonexistent or unknown.
      */
-    public HttpException(String message, Throwable cause) {
+    public HttpException(@Nullable String message, @Nullable Throwable cause) {
         super(message, cause);
     }
 }
diff --git a/components/cronet/android/api/src/android/net/http/NetworkException.java b/components/cronet/android/api/src/android/net/http/NetworkException.java
index 2c5a1033..d8cf0b90 100644
--- a/components/cronet/android/api/src/android/net/http/NetworkException.java
+++ b/components/cronet/android/api/src/android/net/http/NetworkException.java
@@ -4,6 +4,8 @@
 
 package android.net.http;
 
+import androidx.annotation.Nullable;
+
 /**
  * Exception passed to {@link UrlRequest.Callback#onFailed UrlRequest.Callback.onFailed()} when
  * the HTTP stack fails to process a network request. In this case {@link #getErrorCode} can be used
@@ -70,7 +72,7 @@ public abstract class NetworkException extends HttpException {
      *         java.io.IOException#getCause getCause()} method). A null value is permitted, and
      *         indicates that the cause is nonexistent or unknown.
      */
-    public NetworkException(String message, Throwable cause) {
+    public NetworkException(@Nullable String message, @Nullable Throwable cause) {
         super(message, cause);
     }
 
diff --git a/components/cronet/android/api/src/android/net/http/QuicException.java b/components/cronet/android/api/src/android/net/http/QuicException.java
index ff272d74..8dd0f603 100644
--- a/components/cronet/android/api/src/android/net/http/QuicException.java
+++ b/components/cronet/android/api/src/android/net/http/QuicException.java
@@ -4,6 +4,8 @@
 
 package android.net.http;
 
+import androidx.annotation.Nullable;
+
 /**
  * Subclass of {@link NetworkException} which contains a detailed
  * <a href="https://www.chromium.org/quic">QUIC</a> error code from <a
@@ -21,7 +23,7 @@ public abstract class QuicException extends NetworkException {
      *         java.io.IOException#getCause getCause()} method). A null value is permitted, and
      *         indicates that the cause is nonexistent or unknown.
      */
-    protected QuicException(String message, Throwable cause) {
+    protected QuicException(@Nullable String message, @Nullable Throwable cause) {
         super(message, cause);
     }
 
diff --git a/components/cronet/android/api/src/android/net/http/QuicOptions.java b/components/cronet/android/api/src/android/net/http/QuicOptions.java
index b934eaf9..40e2dfea 100644
--- a/components/cronet/android/api/src/android/net/http/QuicOptions.java
+++ b/components/cronet/android/api/src/android/net/http/QuicOptions.java
@@ -4,6 +4,7 @@
 
 package android.net.http;
 
+import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
 import java.time.Duration;
@@ -87,6 +88,7 @@ public class QuicOptions {
     /**
      * See {@link Builder#addAllowedQuicHost}
      */
+    @NonNull
     public Set<String> getQuicHostAllowlist() {
         return mQuicHostAllowlist;
     }
@@ -323,7 +325,8 @@ public class QuicOptions {
          *
          * @return the builder for chaining
          */
-        public Builder addAllowedQuicHost(String quicHost) {
+        @NonNull
+        public Builder addAllowedQuicHost(@NonNull String quicHost) {
             mQuicHostAllowlist.add(quicHost);
             return this;
         }
@@ -394,6 +397,7 @@ public class QuicOptions {
          *
          * @return the builder for chaining
          */
+        @NonNull
         public Builder setInMemoryServerConfigsCacheSize(int inMemoryServerConfigsCacheSize) {
             this.mInMemoryServerConfigsCacheSize = inMemoryServerConfigsCacheSize;
             return this;
@@ -408,7 +412,8 @@ public class QuicOptions {
          *
          * @return the builder for chaining
          */
-        public Builder setHandshakeUserAgent(String handshakeUserAgent) {
+        @NonNull
+        public Builder setHandshakeUserAgent(@Nullable String handshakeUserAgent) {
             this.mHandshakeUserAgent = handshakeUserAgent;
             return this;
         }
@@ -621,6 +626,7 @@ public class QuicOptions {
          * Creates and returns the final {@link QuicOptions} instance, based on the values
          * in this builder.
          */
+        @NonNull
         public QuicOptions build() {
             return new QuicOptions(this);
         }
diff --git a/components/cronet/android/api/src/android/net/http/UploadDataProvider.java b/components/cronet/android/api/src/android/net/http/UploadDataProvider.java
index 4c72416d..1a90f2cf 100644
--- a/components/cronet/android/api/src/android/net/http/UploadDataProvider.java
+++ b/components/cronet/android/api/src/android/net/http/UploadDataProvider.java
@@ -4,6 +4,8 @@
 
 package android.net.http;
 
+import androidx.annotation.NonNull;
+
 import java.io.Closeable;
 import java.io.IOException;
 import java.nio.ByteBuffer;
@@ -49,8 +51,8 @@ public abstract class UploadDataProvider implements Closeable {
      *         thrown exception set as the cause of the
      *         {@link CallbackException}.
      */
-    public abstract void read(UploadDataSink uploadDataSink, ByteBuffer byteBuffer)
-            throws IOException;
+    public abstract void read(@NonNull UploadDataSink uploadDataSink,
+            @NonNull ByteBuffer byteBuffer) throws IOException;
 
     /**
      * Rewinds upload data. Each call must be followed be a single
@@ -75,7 +77,7 @@ public abstract class UploadDataProvider implements Closeable {
      *         thrown exception set as the cause of the
      *         {@link CallbackException}.
      */
-    public abstract void rewind(UploadDataSink uploadDataSink) throws IOException;
+    public abstract void rewind(@NonNull UploadDataSink uploadDataSink) throws IOException;
 
     /**
      * Called when this UploadDataProvider is no longer needed by a request, so that resources
diff --git a/components/cronet/android/api/src/android/net/http/UploadDataSink.java b/components/cronet/android/api/src/android/net/http/UploadDataSink.java
index bb5c83b0..7782be0a 100644
--- a/components/cronet/android/api/src/android/net/http/UploadDataSink.java
+++ b/components/cronet/android/api/src/android/net/http/UploadDataSink.java
@@ -4,6 +4,8 @@
 
 package android.net.http;
 
+import androidx.annotation.NonNull;
+
 /**
  * Defines callbacks methods for {@link UploadDataProvider}. All methods
  * may be called synchronously or asynchronously, on any thread.
@@ -20,7 +22,7 @@ public abstract class UploadDataSink {
      * Called by {@link UploadDataProvider} when a read fails.
      * @param exception Exception passed on to the embedder.
      */
-    public abstract void onReadError(Exception exception);
+    public abstract void onReadError(@NonNull Exception exception);
 
     /**
      * Called by {@link UploadDataProvider} when a rewind succeeds.
@@ -32,5 +34,5 @@ public abstract class UploadDataSink {
      * uploads is not supported.
      * @param exception Exception passed on to the embedder.
      */
-    public abstract void onRewindError(Exception exception);
+    public abstract void onRewindError(@NonNull Exception exception);
 }
diff --git a/components/cronet/android/api/src/android/net/http/UrlRequest.java b/components/cronet/android/api/src/android/net/http/UrlRequest.java
index d050e426..53fe7d66 100644
--- a/components/cronet/android/api/src/android/net/http/UrlRequest.java
+++ b/components/cronet/android/api/src/android/net/http/UrlRequest.java
@@ -7,6 +7,7 @@ package android.net.http;
 import android.annotation.IntDef;
 import android.net.Network;
 
+import androidx.annotation.NonNull;
 import androidx.annotation.Nullable;
 
 import java.lang.annotation.Retention;
@@ -43,7 +44,8 @@ public abstract class UrlRequest {
          * @param method "GET", "HEAD", "DELETE", "POST" or "PUT".
          * @return the builder to facilitate chaining.
          */
-        public abstract Builder setHttpMethod(String method);
+        @NonNull
+        public abstract Builder setHttpMethod(@NonNull String method);
 
         /**
          * Adds a request header.
@@ -52,13 +54,15 @@ public abstract class UrlRequest {
          * @param value header value.
          * @return the builder to facilitate chaining.
          */
-        public abstract Builder addHeader(String header, String value);
+        @NonNull
+        public abstract Builder addHeader(@NonNull String header, @NonNull String value);
 
         /**
          * Disables cache for the request. If context is not set up to use cache,
          * this call has no effect.
          * @return the builder to facilitate chaining.
          */
+        @NonNull
         public abstract Builder disableCache();
 
         /**
@@ -93,6 +97,7 @@ public abstract class UrlRequest {
          *         {@link #REQUEST_PRIORITY_IDLE REQUEST_PRIORITY_*} values.
          * @return the builder to facilitate chaining.
          */
+        @NonNull
         public abstract Builder setPriority(int priority);
 
         /**
@@ -106,8 +111,9 @@ public abstract class UrlRequest {
          *     {@code Executor} the request itself is using.
          * @return the builder to facilitate chaining.
          */
+        @NonNull
         public abstract Builder setUploadDataProvider(
-                UploadDataProvider uploadDataProvider, Executor executor);
+                @NonNull UploadDataProvider uploadDataProvider, @NonNull Executor executor);
 
         /**
          * Marks that the executors this request will use to notify callbacks (for
@@ -119,6 +125,7 @@ public abstract class UrlRequest {
          * It should not be used if your callbacks perform disk I/O, acquire locks, or call into
          * other code you don't carefully control and audit.
          */
+        @NonNull
         public abstract Builder allowDirectExecutor();
 
         /**
@@ -130,6 +137,7 @@ public abstract class UrlRequest {
          * @param network the network to bind the request to. Specify {@code null} to unbind.
          * @return the builder to facilitate chaining.
          */
+        @NonNull
         public abstract Builder bindToNetwork(@Nullable Network network);
 
         /**
@@ -140,6 +148,7 @@ public abstract class UrlRequest {
          * @return constructed {@link UrlRequest} using configuration within
          *         this {@link Builder}.
          */
+        @NonNull
         public abstract UrlRequest build();
     }
 
@@ -171,8 +180,8 @@ public abstract class UrlRequest {
          *         will be called with the thrown exception set as the cause of the
          *         {@link CallbackException}.
          */
-        public abstract void onRedirectReceived(
-                UrlRequest request, UrlResponseInfo info, String newLocationUrl) throws Exception;
+        public abstract void onRedirectReceived(@NonNull UrlRequest request,
+                @NonNull UrlResponseInfo info, @NonNull String newLocationUrl) throws Exception;
 
         /**
          * Invoked when the final set of headers, after all redirects, is received.
@@ -191,8 +200,8 @@ public abstract class UrlRequest {
          *         will be called with the thrown exception set as the cause of the
          *         {@link CallbackException}.
          */
-        public abstract void onResponseStarted(UrlRequest request, UrlResponseInfo info)
-                throws Exception;
+        public abstract void onResponseStarted(@NonNull UrlRequest request,
+                @NonNull UrlResponseInfo info) throws Exception;
 
         /**
          * Invoked whenever part of the response body has been read. Only part of
@@ -216,8 +225,8 @@ public abstract class UrlRequest {
          *         {@link #onFailed} will be called with the thrown exception set as the cause of
          *         the {@link CallbackException}.
          */
-        public abstract void onReadCompleted(
-                UrlRequest request, UrlResponseInfo info, ByteBuffer byteBuffer) throws Exception;
+        public abstract void onReadCompleted(@NonNull UrlRequest request,
+                @NonNull UrlResponseInfo info, @NonNull ByteBuffer byteBuffer) throws Exception;
 
         /**
          * Invoked when request is completed successfully. Once invoked, no other
@@ -226,7 +235,8 @@ public abstract class UrlRequest {
          * @param request Request that succeeded.
          * @param info Response information.
          */
-        public abstract void onSucceeded(UrlRequest request, UrlResponseInfo info);
+        public abstract void onSucceeded(
+                @NonNull UrlRequest request, @NonNull UrlResponseInfo info);
 
         /**
          * Invoked if request failed for any reason after {@link UrlRequest#start}.
@@ -238,8 +248,8 @@ public abstract class UrlRequest {
          *         received.
          * @param error information about error.
          */
-        public abstract void onFailed(
-                UrlRequest request, UrlResponseInfo info, HttpException error);
+        public abstract void onFailed(@NonNull UrlRequest request,
+                @Nullable UrlResponseInfo info, @NonNull HttpException error);
 
         /**
          * Invoked if request was canceled via {@link UrlRequest#cancel}. Once
@@ -250,7 +260,7 @@ public abstract class UrlRequest {
          * @param info Response information. May be {@code null} if no response was
          *         received.
          */
-        public void onCanceled(UrlRequest request, UrlResponseInfo info) {}
+        public void onCanceled(@NonNull UrlRequest request, @Nullable UrlResponseInfo info) {}
     }
 
     /** @hide */
@@ -429,7 +439,7 @@ public abstract class UrlRequest {
      *     position, limit, or data between its position and limit until the
      *     request calls back into the {@link Callback}.
      */
-    public abstract void read(ByteBuffer buffer);
+    public abstract void read(@NonNull ByteBuffer buffer);
 
     /**
      * Cancels the request. Can be called at any time.
@@ -467,7 +477,7 @@ public abstract class UrlRequest {
      * @param listener a {@link StatusListener} that will be invoked with
      *         the request's current status.
      */
-    public abstract void getStatus(final StatusListener listener);
+    public abstract void getStatus(@NonNull final StatusListener listener);
 
     // Note:  There are deliberately no accessors for the results of the request
     // here. Having none removes any ambiguity over when they are populated,
diff --git a/components/cronet/android/api/src/android/net/http/UrlResponseInfo.java b/components/cronet/android/api/src/android/net/http/UrlResponseInfo.java
index 6b66e895..2c74197d 100644
--- a/components/cronet/android/api/src/android/net/http/UrlResponseInfo.java
+++ b/components/cronet/android/api/src/android/net/http/UrlResponseInfo.java
@@ -4,6 +4,9 @@
 
 package android.net.http;
 
+import androidx.annotation.NonNull;
+import androidx.annotation.Nullable;
+
 import java.util.List;
 import java.util.Map;
 
@@ -42,6 +45,7 @@ public abstract class UrlResponseInfo {
      * redirects, so it may not be the originally requested URL.
      * @return the URL the response is for.
      */
+    @NonNull
     public abstract String getUrl();
 
     /**
@@ -49,6 +53,7 @@ public abstract class UrlResponseInfo {
      * the following entries are redirects followed.
      * @return the URL chain.
      */
+    @NonNull
     public abstract List<String> getUrlChain();
 
     /**
@@ -63,6 +68,7 @@ public abstract class UrlResponseInfo {
      * request received a "HTTP/1.1 200 OK" response, this method returns "OK".
      * @return the HTTP status text of the status line.
      */
+    @NonNull
     public abstract String getHttpStatusText();
 
     /**
@@ -70,6 +76,7 @@ public abstract class UrlResponseInfo {
      * The headers are in the same order they are received over the wire.
      * @return an unmodifiable list of response header field and value pairs.
      */
+    @NonNull
     public abstract List<Map.Entry<String, String>> getAllHeadersAsList();
 
     /**
@@ -78,6 +85,7 @@ public abstract class UrlResponseInfo {
      * were received over the wire.
      * @return an unmodifiable map of the response-header fields and values.
      */
+    @NonNull
     public abstract Map<String, List<String>> getAllHeaders();
 
     /**
@@ -97,12 +105,14 @@ public abstract class UrlResponseInfo {
      */
     // TODO(mef): Figure out what this returns in the cached case, both with
     // and without a revalidation request.
+    @NonNull
     public abstract String getNegotiatedProtocol();
 
     /**
      * Returns the proxy server that was used for the request.
      * @return the proxy server that was used for the request.
      */
+    @Nullable
     public abstract String getProxyServer();
 
     /**
-- 
2.39.1.581.gbfd45094c4-goog

